package com.dnc.mprs.reportservice.domain;

import static com.dnc.mprs.reportservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BathroomAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBathroomAllPropertiesEquals(Bathroom expected, Bathroom actual) {
        assertBathroomAutoGeneratedPropertiesEquals(expected, actual);
        assertBathroomAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBathroomAllUpdatablePropertiesEquals(Bathroom expected, Bathroom actual) {
        assertBathroomUpdatableFieldsEquals(expected, actual);
        assertBathroomUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBathroomAutoGeneratedPropertiesEquals(Bathroom expected, Bathroom actual) {
        assertThat(expected)
            .as("Verify Bathroom auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBathroomUpdatableFieldsEquals(Bathroom expected, Bathroom actual) {
        assertThat(expected)
            .as("Verify Bathroom relevant properties")
            .satisfies(e -> assertThat(e.getBathroomName()).as("check bathroomName").isEqualTo(actual.getBathroomName()))
            .satisfies(e -> assertThat(e.getCondtionLevel()).as("check condtionLevel").isEqualTo(actual.getCondtionLevel()))
            .satisfies(e ->
                assertThat(e.getBathroomSize())
                    .as("check bathroomSize")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getBathroomSize())
            )
            .satisfies(e -> assertThat(e.getWaterPressure()).as("check waterPressure").isEqualTo(actual.getWaterPressure()))
            .satisfies(e ->
                assertThat(e.getShowerBoothPresence()).as("check showerBoothPresence").isEqualTo(actual.getShowerBoothPresence())
            )
            .satisfies(e -> assertThat(e.getBathtubPresence()).as("check bathtubPresence").isEqualTo(actual.getBathtubPresence()))
            .satisfies(e -> assertThat(e.getFloorAndCeiling()).as("check floorAndCeiling").isEqualTo(actual.getFloorAndCeiling()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBathroomUpdatableRelationshipsEquals(Bathroom expected, Bathroom actual) {
        assertThat(expected)
            .as("Verify Bathroom relationships")
            .satisfies(e -> assertThat(e.getReport()).as("check report").isEqualTo(actual.getReport()));
    }
}
