package com.dnc.mprs.reportservice.domain;

import static com.dnc.mprs.reportservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class EnvFactorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnvFactorAllPropertiesEquals(EnvFactor expected, EnvFactor actual) {
        assertEnvFactorAutoGeneratedPropertiesEquals(expected, actual);
        assertEnvFactorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnvFactorAllUpdatablePropertiesEquals(EnvFactor expected, EnvFactor actual) {
        assertEnvFactorUpdatableFieldsEquals(expected, actual);
        assertEnvFactorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnvFactorAutoGeneratedPropertiesEquals(EnvFactor expected, EnvFactor actual) {
        assertThat(expected)
            .as("Verify EnvFactor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnvFactorUpdatableFieldsEquals(EnvFactor expected, EnvFactor actual) {
        assertThat(expected)
            .as("Verify EnvFactor relevant properties")
            .satisfies(e -> assertThat(e.getReportId()).as("check reportId").isEqualTo(actual.getReportId()))
            .satisfies(e -> assertThat(e.getEnvFactorName()).as("check envFactorName").isEqualTo(actual.getEnvFactorName()))
            .satisfies(e ->
                assertThat(e.getEnvFactorDistance())
                    .as("check envFactorDistance")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(actual.getEnvFactorDistance())
            )
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEnvFactorUpdatableRelationshipsEquals(EnvFactor expected, EnvFactor actual) {
        assertThat(expected)
            .as("Verify EnvFactor relationships")
            .satisfies(e -> assertThat(e.getReport()).as("check report").isEqualTo(actual.getReport()));
    }
}
