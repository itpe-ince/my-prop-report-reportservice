package com.dnc.mprs.reportservice.domain;

import static com.dnc.mprs.reportservice.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class LivingRoomAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLivingRoomAllPropertiesEquals(LivingRoom expected, LivingRoom actual) {
        assertLivingRoomAutoGeneratedPropertiesEquals(expected, actual);
        assertLivingRoomAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLivingRoomAllUpdatablePropertiesEquals(LivingRoom expected, LivingRoom actual) {
        assertLivingRoomUpdatableFieldsEquals(expected, actual);
        assertLivingRoomUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLivingRoomAutoGeneratedPropertiesEquals(LivingRoom expected, LivingRoom actual) {
        assertThat(expected)
            .as("Verify LivingRoom auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLivingRoomUpdatableFieldsEquals(LivingRoom expected, LivingRoom actual) {
        assertThat(expected)
            .as("Verify LivingRoom relevant properties")
            .satisfies(e -> assertThat(e.getLivingRoomName()).as("check livingRoomName").isEqualTo(actual.getLivingRoomName()))
            .satisfies(e -> assertThat(e.getConditionLevel()).as("check conditionLevel").isEqualTo(actual.getConditionLevel()))
            .satisfies(e ->
                assertThat(e.getRoomSize()).as("check roomSize").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getRoomSize())
            )
            .satisfies(e -> assertThat(e.getWallState()).as("check wallState").isEqualTo(actual.getWallState()))
            .satisfies(e -> assertThat(e.getFloorMaterial()).as("check floorMaterial").isEqualTo(actual.getFloorMaterial()))
            .satisfies(e -> assertThat(e.getSunlight()).as("check sunlight").isEqualTo(actual.getSunlight()))
            .satisfies(e -> assertThat(e.getRemarks()).as("check remarks").isEqualTo(actual.getRemarks()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLivingRoomUpdatableRelationshipsEquals(LivingRoom expected, LivingRoom actual) {
        assertThat(expected)
            .as("Verify LivingRoom relationships")
            .satisfies(e -> assertThat(e.getReport()).as("check report").isEqualTo(actual.getReport()));
    }
}
