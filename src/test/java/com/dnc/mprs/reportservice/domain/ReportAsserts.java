package com.dnc.mprs.reportservice.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAllPropertiesEquals(Report expected, Report actual) {
        assertReportAutoGeneratedPropertiesEquals(expected, actual);
        assertReportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAllUpdatablePropertiesEquals(Report expected, Report actual) {
        assertReportUpdatableFieldsEquals(expected, actual);
        assertReportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportAutoGeneratedPropertiesEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportUpdatableFieldsEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report relevant properties")
            .satisfies(e -> assertThat(e.getReportTitle()).as("check reportTitle").isEqualTo(actual.getReportTitle()))
            .satisfies(e -> assertThat(e.getReportDate()).as("check reportDate").isEqualTo(actual.getReportDate()))
            .satisfies(e -> assertThat(e.getAuthorId()).as("check authorId").isEqualTo(actual.getAuthorId()))
            .satisfies(e -> assertThat(e.getSummary()).as("check summary").isEqualTo(actual.getSummary()))
            .satisfies(e -> assertThat(e.getExteriorState()).as("check exteriorState").isEqualTo(actual.getExteriorState()))
            .satisfies(e -> assertThat(e.getConstructionYear()).as("check constructionYear").isEqualTo(actual.getConstructionYear()))
            .satisfies(e -> assertThat(e.getMaintenanceState()).as("check maintenanceState").isEqualTo(actual.getMaintenanceState()))
            .satisfies(e -> assertThat(e.getParkingFacility()).as("check parkingFacility").isEqualTo(actual.getParkingFacility()))
            .satisfies(e -> assertThat(e.getParkingCount()).as("check parkingCount").isEqualTo(actual.getParkingCount()))
            .satisfies(e -> assertThat(e.getElevatorState()).as("check elevatorState").isEqualTo(actual.getElevatorState()))
            .satisfies(e -> assertThat(e.getNoiseState()).as("check noiseState").isEqualTo(actual.getNoiseState()))
            .satisfies(e -> assertThat(e.getHomepadState()).as("check homepadState").isEqualTo(actual.getHomepadState()))
            .satisfies(e -> assertThat(e.getCctvYn()).as("check cctvYn").isEqualTo(actual.getCctvYn()))
            .satisfies(e -> assertThat(e.getFireSafetyState()).as("check fireSafetyState").isEqualTo(actual.getFireSafetyState()))
            .satisfies(e -> assertThat(e.getDoorSecurityState()).as("check doorSecurityState").isEqualTo(actual.getDoorSecurityState()))
            .satisfies(e -> assertThat(e.getMaintenanceFee()).as("check maintenanceFee").isEqualTo(actual.getMaintenanceFee()))
            .satisfies(e -> assertThat(e.getRedevelopmentYn()).as("check redevelopmentYn").isEqualTo(actual.getRedevelopmentYn()))
            .satisfies(e -> assertThat(e.getRentalDemand()).as("check rentalDemand").isEqualTo(actual.getRentalDemand()))
            .satisfies(e -> assertThat(e.getCommunityRules()).as("check communityRules").isEqualTo(actual.getCommunityRules()))
            .satisfies(e -> assertThat(e.getComplexId()).as("check complexId").isEqualTo(actual.getComplexId()))
            .satisfies(e -> assertThat(e.getComplexName()).as("check complexName").isEqualTo(actual.getComplexName()))
            .satisfies(e -> assertThat(e.getPropertyId()).as("check propertyId").isEqualTo(actual.getPropertyId()))
            .satisfies(e -> assertThat(e.getPropertyName()).as("check propertyName").isEqualTo(actual.getPropertyName()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getUpdatedAt()).as("check updatedAt").isEqualTo(actual.getUpdatedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReportUpdatableRelationshipsEquals(Report expected, Report actual) {
        assertThat(expected)
            .as("Verify Report relationships")
            .satisfies(e -> assertThat(e.getAuthor()).as("check author").isEqualTo(actual.getAuthor()));
    }
}
